;/*********************************************
;Project : Test software
;**********************************************
;Chip type: ATmega164A
;Clock frequency: 20 MHz
;Compilers:  CVAVR 2.x
;*********************************************/
;
;#include <mega164a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <stdio.h>
;#include <delay.h>
;#include <string.h>
;#include <stdlib.h>
;#include <stdint.h>
;#include "defs.h"
;
;//*************************************************************************************************
;//*********** BEGIN SERIAL STUFF (interrupt-driven, generated by Code Wizard) *********************
;//*************************************************************************************************
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART0 Receiver buffer
;#define RX_BUFFER_SIZE0 8
;char rx_buffer0[RX_BUFFER_SIZE0];
;
;#if RX_BUFFER_SIZE0 <= 256
;unsigned char rx_wr_index0,rx_rd_index0,rx_counter0;
;#else
;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
;#endif
;
;// This flag is set on USART0 Receiver buffer overflow
;bit rx_buffer_overflow0;
;
;// USART0 Receiver interrupt service routine
;interrupt [USART0_RXC] void usart0_rx_isr(void)
; 0000 0047 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0048 char status,data;
; 0000 0049 status=UCSR0A;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 004A data=UDR0;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 004B if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 004C    {
; 0000 004D    rx_buffer0[rx_wr_index0++]=data;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 004E #if RX_BUFFER_SIZE0 == 256
; 0000 004F    // special case for receiver buffer size=256
; 0000 0050    if (++rx_counter0 == 0) rx_buffer_overflow0=1;
; 0000 0051 #else
; 0000 0052    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0053    if (++rx_counter0 == RX_BUFFER_SIZE0)
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0054       {
; 0000 0055       rx_counter0=0;
;PCODE: $00000026 VOL: 0
; 0000 0056       rx_buffer_overflow0=1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0057       }
; 0000 0058 #endif
; 0000 0059    }
;PCODE: $00000029 VOL: 0
; 0000 005A }
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART0 Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0061 {
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0062 char data;
; 0000 0063 while (rx_counter0==0);
;PCODE: $00000031 VOL: 0
;	data -> R17
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0064 data=rx_buffer0[rx_rd_index0++];
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0065 #if RX_BUFFER_SIZE0 != 256
; 0000 0066 if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0067 #endif
; 0000 0068 #asm("cli")
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
	cli
;PCODE: $00000042 VOL: 0
; 0000 0069 --rx_counter0;
;PCODE: $00000043 VOL: 0
; 0000 006A #asm("sei")
;PCODE: $00000044 VOL: 0
	sei
;PCODE: $00000045 VOL: 0
; 0000 006B return data;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 006C }
;PCODE: $00000049 VOL: 0
;#pragma used-
;#endif
;
;// USART0 Transmitter buffer
;#define TX_BUFFER_SIZE0 8
;char tx_buffer0[TX_BUFFER_SIZE0];
;
;#if TX_BUFFER_SIZE0 <= 256
;unsigned char tx_wr_index0,tx_rd_index0,tx_counter0;
;#else
;unsigned int tx_wr_index0,tx_rd_index0,tx_counter0;
;#endif
;
;// USART0 Transmitter interrupt service routine
;interrupt [USART0_TXC] void usart0_tx_isr(void)
; 0000 007C {
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 007D if (tx_counter0)
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 007E    {
; 0000 007F    --tx_counter0;
;PCODE: $0000004E VOL: 0
; 0000 0080    UDR0=tx_buffer0[tx_rd_index0++];
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0081 #if TX_BUFFER_SIZE0 != 256
; 0000 0082    if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0083 #endif
; 0000 0084    }
;PCODE: $00000059 VOL: 0
; 0000 0085 }
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART0 Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 008C {
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 008D while (tx_counter0 == TX_BUFFER_SIZE0);
;	c -> Y+0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 008E #asm("cli")
;PCODE: $00000066 VOL: 0
	cli
;PCODE: $00000067 VOL: 0
; 0000 008F if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0090    {
; 0000 0091    tx_buffer0[tx_wr_index0++]=c;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0092 #if TX_BUFFER_SIZE0 != 256
; 0000 0093    if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0094 #endif
; 0000 0095    ++tx_counter0;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0096    }
; 0000 0097 else
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0098    UDR0=c;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0099 #asm("sei")
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
	sei
;PCODE: $00000081 VOL: 0
; 0000 009A }
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;#pragma used-
;#endif
;//*************************************************************************************************
;//********************END SERIAL STUFF (USART0)  **************************************************
;//*************************************************************************************************
;//*******   if you need USART1, enable it in Code Wizard and copy coresponding code here  *********
;//*************************************************************************************************
;
;/*
; * Timer 1 Output Compare A interrupt is used to blink LED
; */
;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
; 0000 00A7 {
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00A8 LED1 = ~LED1; // invert LED
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00A9 }
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;
;// Read the 8 most significant bits
;// of the AD conversion result
;unsigned char read_adc(unsigned char adc_input)
; 0000 00AE {
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00AF ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00B0 // Delay needed for the stabilization of the ADC input voltage
; 0000 00B1 delay_us(10);
;PCODE: $00000099 VOL: 0
; 0000 00B2 // Start the AD conversion
; 0000 00B3 ADCSRA|=0x40;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00B4 // Wait for the AD conversion to complete
; 0000 00B5 while ((ADCSRA & 0x10)==0);
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00B6 ADCSRA|=0x10;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00B7 return ADCH;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00B8 }
;PCODE: $000000A9 VOL: 0
;
;/*
; * main function of program
; */
;
;void main (void)
; 0000 00BF {
;PCODE: $000000AA VOL: 0
; 0000 00C0 int Axa_X;
; 0000 00C1 int Axa_Y;
; 0000 00C2 int axa = 1;
; 0000 00C3 
; 0000 00C4 	Init_initController();  // this must be the first "init" action/call!
;	Axa_X -> R16,R17
;	Axa_Y -> R18,R19
;	axa -> R20,R21
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00C5 	#asm("sei")             // enable interrupts
;PCODE: $000000AE VOL: 0
	sei
;PCODE: $000000AF VOL: 0
; 0000 00C6 	LED1 = 1;           	// initial state, will be changed by timer 1
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00C7 
; 0000 00C8     //Wake pentru accelerometru
; 0000 00C9     PORTB.7 = 1;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00CA 
; 0000 00CB 	while(TRUE)
;PCODE: $000000B4 VOL: 0
; 0000 00CC 	{
; 0000 00CD         switch(axa)
;PCODE: $000000B5 VOL: 0
; 0000 00CE         {
; 0000 00CF          case 1:
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00D0          Axa_Y = read_adc(0);
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00D1          delay_ms(10);
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00D2 
; 0000 00D3          //Cazul in care bolobocul este centrat pe axa Y
; 0000 00D4           if (Axa_Y > 100 && Axa_Y < 110) {
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00D5             //Aprind ledul alb din centru
; 0000 00D6             PORTC.7 = 1;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00D7 
; 0000 00D8             //Sting ledurile de pe axa Y
; 0000 00D9             PORTC.0 = 0;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00DA             PORTC.1 = 0;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00DB             PORTC.2 = 0;
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00DC             PORTC.4 = 0;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00DD             PORTC.3 = 0;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00DE             PORTC.5 = 0;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 00DF           }
; 0000 00E0           else PORTC.7 = 0;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00E1 
; 0000 00E2          //Cazul in care bolobocul este inclinat sub 30 de grade pe axa Y
; 0000 00E3          if (Axa_Y >= 110 && Axa_Y < 125) {
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00E4             //Aprind ledul verde
; 0000 00E5             PORTC.2 = 1;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 00E6 
; 0000 00E7             //Sting restul ledurilor de pe axa Y
; 0000 00E8             PORTC.0 = 0;
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00E9             PORTC.1 = 0;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00EA             PORTC.3 = 0;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00EB             PORTC.4 = 0;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00EC             PORTC.5 = 0;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 00ED          }
; 0000 00EE 
; 0000 00EF          if (Axa_Y >85 && Axa_Y <= 100) {
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 00F0             //Aprind ledul verde
; 0000 00F1             PORTC.3 = 1;
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 00F2 
; 0000 00F3             //Sting restul ledurilor de pe axa Y
; 0000 00F4             PORTC.0 = 0;
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 00F5             PORTC.1 = 0;
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00F6             PORTC.2 = 0;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00F7             PORTC.4 = 0;
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 00F8             PORTC.5 = 0;
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 00F9          }
; 0000 00FA 
; 0000 00FB          //Cazul in care bolobocul este inclinat intre 30-45 de grade pe axa Y
; 0000 00FC          if (Axa_Y >= 125 && Axa_Y < 140) {
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00FD             //Aprind ledul galben
; 0000 00FE             PORTC.1 = 1;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 00FF 
; 0000 0100             //Sting restul ledurilor de pe axa Y
; 0000 0101             PORTC.0 = 0;
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 0102             PORTC.2 = 0;
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 0103             PORTC.3 = 0;
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 0104             PORTC.4 = 0;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 0105             PORTC.5 = 0;
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 0106          }
; 0000 0107 
; 0000 0108          if (Axa_Y > 70 && Axa_Y <= 85) {
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 0109             //Aprind ledul galben
; 0000 010A             PORTC.4 = 1;
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 010B 
; 0000 010C             //Sting restul ledurilor de pe axa Y
; 0000 010D             PORTC.0 = 0;
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 010E             PORTC.1 = 0;
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 010F             PORTC.2 = 0;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 0110             PORTC.3 = 0;
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 0111             PORTC.5 = 0;
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 0112          }
; 0000 0113 
; 0000 0114          //Cazul in care bolobocul este inclinat la peste 45 de grade pe axa Y
; 0000 0115          if (Axa_Y >= 140) {
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 0116             //Aprind ledul rosu
; 0000 0117             PORTC.0 = 1;
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 0118 
; 0000 0119             //Sting restul ledurilor de pe axa Y
; 0000 011A             PORTC.1 = 0;
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 011B             PORTC.2 = 0;
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 011C             PORTC.3 = 0;
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 011D             PORTC.4 = 0;
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 011E             PORTC.5 = 0;
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 011F          }
; 0000 0120 
; 0000 0121          if (Axa_Y <= 70) {
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 0122             //Aprind ledul rosu
; 0000 0123             PORTC.5 = 1;
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 0124 
; 0000 0125             //Sting restul ledurilor de pe axa Y
; 0000 0126             PORTC.0 = 0;
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 0127             PORTC.1 = 0;
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 0128             PORTC.2 = 0;
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 0129             PORTC.3 = 0;
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 012A             PORTC.4 = 0;
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 012B          }
; 0000 012C 
; 0000 012D          delay_ms(200);
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 012E          axa = 2;
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 012F          break;
;PCODE: $0000015E VOL: 0
; 0000 0130 
; 0000 0131          case 2:
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 0132          Axa_X = read_adc(1);
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 0133          delay_ms(10);
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 0134 
; 0000 0135          //Cazul in care bolobocul este centrat pe axa X
; 0000 0136 	    if (Axa_X > 90 && Axa_X < 100) {
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 0137 	        //Aprind ledul alb din centru
; 0000 0138 	    	PORTC.7 = 1;
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 0139 
; 0000 013A 	    	//Sting ledurile de pe axa X
; 0000 013B 	    	PORTB.0 = 0;
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 013C 	    	PORTB.1 = 0;
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 013D 	    	PORTB.2 = 0;
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 013E 	    	PORTB.3 = 0;
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 013F 	    	PORTB.4 = 0;
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 0140 	    	PORTB.5 = 0;
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 0141 	    }
; 0000 0142         else PORTC.7 = 0;
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 0143 
; 0000 0144         //Cazul in care bolobocul este inclinat sub 30 grade pe axa X
; 0000 0145         if (Axa_X >= 100 && Axa_X < 115) {
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 0146             //Aprind ledul verde
; 0000 0147             PORTB.2 = 1;
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 0148 
; 0000 0149             //Sting restul ledurilor de pe axa X
; 0000 014A             PORTB.0 = 0;
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 014B             PORTB.1 = 0;
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 014C             PORTB.3 = 0;
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 014D             PORTB.4 = 0;
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 014E             PORTB.5 = 0;
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 014F         }
; 0000 0150 
; 0000 0151         if (Axa_X > 75 && Axa_X <= 90) {
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 0152             //Aprind ledul verde
; 0000 0153             PORTB.3 = 1;
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 0154 
; 0000 0155             //Sting restul ledurilor de pe axa X
; 0000 0156             PORTB.0 = 0;
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 0157             PORTB.1 = 0;
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 0158             PORTB.2 = 0;
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0000 0159             PORTB.4 = 0;
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0000 015A             PORTB.5 = 0;
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0000 015B         }
; 0000 015C 
; 0000 015D         //Cazul in care bolobocul este inclinat intre 30-45 grade pe axa X
; 0000 015E         if (Axa_X >= 115 && Axa_X < 130) {
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0000 015F             //Aprind ledul galben
; 0000 0160             PORTB.1 = 1;
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 0161 
; 0000 0162             //Sting restul ledurilor de pe axa X
; 0000 0163             PORTB.0 = 0;
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 0164             PORTB.2 = 0;
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 0165             PORTB.3 = 0;
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 0166             PORTB.4 = 0;
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0000 0167             PORTB.5 = 0;
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 0168         }
; 0000 0169 
; 0000 016A         if (Axa_X > 60 && Axa_X <= 75) {
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0000 016B             //Aprind ledul galben
; 0000 016C             PORTB.4 = 1;
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
; 0000 016D 
; 0000 016E             //Sting restul ledurilor de pe axa X
; 0000 016F             PORTB.0 = 0;
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0000 0170             PORTB.1 = 0;
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 0171             PORTB.2 = 0;
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
; 0000 0172             PORTB.3 = 0;
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0000 0173             PORTB.5 = 0;
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 0174         }
; 0000 0175 
; 0000 0176         //Cazul in care bolobocul este inclinat la peste 45 de grade pe axa X
; 0000 0177         if (Axa_X >= 130) {
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0000 0178             //Aprind ledul rosu
; 0000 0179             PORTB.0 = 1;
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0000 017A 
; 0000 017B             //Sting restul ledurilor de pe axa X
; 0000 017C             PORTB.1 = 0;
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 017D             PORTB.2 = 0;
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 017E             PORTB.3 = 0;
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0000 017F             PORTB.4 = 0;
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0000 0180             PORTB.5 = 0;
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0000 0181         }
; 0000 0182 
; 0000 0183         if (Axa_X <= 60) {
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
; 0000 0184             //Aprind ledul rosu
; 0000 0185             PORTB.5 = 1;
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
; 0000 0186 
; 0000 0187             //Sting restul ledurilor de pe axa X
; 0000 0188             PORTB.0 = 0;
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0000 0189             PORTB.1 = 0;
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0000 018A             PORTB.2 = 0;
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
; 0000 018B             PORTB.3 = 0;
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0000 018C             PORTB.4 = 0;
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 018D         }
; 0000 018E         delay_ms(200);
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 018F         axa = 1;
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0000 0190         break;
;PCODE: $00000208 VOL: 0
; 0000 0191         }// end switch
;PCODE: $00000209 VOL: 0
; 0000 0192     }// end while
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
; 0000 0193 }// end main loop
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;
;
