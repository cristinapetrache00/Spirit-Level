
AVRASM ver. 2.1.30  E:\petrache\cc1.asm Fri Jun 17 20:46:01 2022

E:\petrache\cc1.asm(1063): warning: Register r3 already defined by the .DEF directive
E:\petrache\cc1.asm(1064): warning: Register r2 already defined by the .DEF directive
E:\petrache\cc1.asm(1065): warning: Register r5 already defined by the .DEF directive
E:\petrache\cc1.asm(1066): warning: Register r4 already defined by the .DEF directive
E:\petrache\cc1.asm(1067): warning: Register r7 already defined by the .DEF directive
E:\petrache\cc1.asm(1068): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega164A
                 ;Program type             : Application
                 ;Clock frequency          : 20,000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 256 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : No
                 ;'char' is unsigned       : No
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega164A
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1279
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 	.EQU GPIOR1=0x2A
                 	.EQU GPIOR2=0x2B
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x04FF
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rx_wr_index0=R3
                 	.DEF _rx_rd_index0=R2
                 	.DEF _rx_counter0=R5
                 	.DEF _tx_wr_index0=R4
                 	.DEF _tx_rd_index0=R7
                 	.DEF _tx_counter0=R6
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION VALUES
                 	.EQU __GPIOR0_INIT=0x00
                 	.EQU __GPIOR1_INIT=0x00
                 	.EQU __GPIOR2_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0051 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 00c3 	JMP  _timer1_compa_isr
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 008b 	JMP  _usart0_rx_isr
00002a 940c 0000 	JMP  0x00
00002c 940c 00ab 	JMP  _usart0_tx_isr
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00003e 2710
00003f 03e8
000040 0064
000041 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000042 0001      	.DB  0x1,0x0
                 _tbl16_G100:
000043 1000
000044 0100
000045 0010
000046 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x2040060:
E:\petrache\cc1.asm(1121): warning: .cseg .db misalignment - padding zero byte
000047 0001      	.DB  0x1
                 _0x2040000:
000048 4e2d
000049 4e41
00004a 4900
00004b 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
E:\petrache\cc1.asm(1124): warning: .cseg .db misalignment - padding zero byte
00004c 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00004d 0001      	.DW  0x01
00004e 0210      	.DW  __seed_G102
00004f 008e      	.DW  _0x2040060*2
                 
                 _0xFFFFFFFF:
000050 0000      	.DW  0
                 
                 __RESET:
000051 94f8      	CLI
000052 27ee      	CLR  R30
000053 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000054 e0f1      	LDI  R31,1
000055 bff5      	OUT  MCUCR,R31
000056 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000057 e1f8      	LDI  R31,0x18
000058 95a8      	WDR
000059 b7a4      	IN   R26,MCUSR
00005a 7fa7      	CBR  R26,8
00005b bfa4      	OUT  MCUSR,R26
00005c 93f0 0060 	STS  WDTCSR,R31
00005e 93e0 0060 	STS  WDTCSR,R30
                 
                 ;CLEAR R2-R14
000060 e08d      	LDI  R24,(14-2)+1
000061 e0a2      	LDI  R26,2
000062 27bb      	CLR  R27
                 __CLEAR_REG:
000063 93ed      	ST   X+,R30
000064 958a      	DEC  R24
000065 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000066 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000067 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000068 e0a0      	LDI  R26,LOW(__SRAM_START)
000069 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00006a 93ed      	ST   X+,R30
00006b 9701      	SBIW R24,1
00006c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00006d e9ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00006e e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00006f 9185      	LPM  R24,Z+
000070 9195      	LPM  R25,Z+
000071 9700      	SBIW R24,0
000072 f061      	BREQ __GLOBAL_INI_END
000073 91a5      	LPM  R26,Z+
000074 91b5      	LPM  R27,Z+
000075 9005      	LPM  R0,Z+
000076 9015      	LPM  R1,Z+
000077 01bf      	MOVW R22,R30
000078 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000079 9005      	LPM  R0,Z+
00007a 920d      	ST   X+,R0
00007b 9701      	SBIW R24,1
00007c f7e1      	BRNE __GLOBAL_INI_LOOP
00007d 01fb      	MOVW R30,R22
00007e cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION
00007f e0e0      	LDI  R30,__GPIOR0_INIT
000080 bbee      	OUT  GPIOR0,R30
                 	;__GPIOR1_INIT = __GPIOR0_INIT
000081 bdea      	OUT  GPIOR1,R30
                 	;__GPIOR2_INIT = __GPIOR0_INIT
000082 bdeb      	OUT  GPIOR2,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000083 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000084 bfed      	OUT  SPL,R30
000085 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000086 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000087 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000088 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000089 940c 00e2 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
000000 00        	.DB  0 ; FIRST EEPROM LOCATION NOT USED, SEE ATMEL ERRATA SHEETS
                 
                 	.DSEG
                 	.ORG 0x200
                 
                 	.CSEG
                 ;/*********************************************
                 ;Project : Test software
                 ;**********************************************
                 ;Chip type: ATmega164A
                 ;Clock frequency: 20 MHz
                 ;Compilers:  CVAVR 2.x
                 ;*********************************************/
                 ;
                 ;#include <mega164a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <stdlib.h>
                 ;#include <stdint.h>
                 ;#include "defs.h"
                 ;
                 ;//*************************************************************************************************
                 ;//*********** BEGIN SERIAL STUFF (interrupt-driven, generated by Code Wizard) *********************
                 ;//*************************************************************************************************
                 ;
                 ;#ifndef RXB8
                 ;#define RXB8 1
                 ;#endif
                 ;
                 ;#ifndef TXB8
                 ;#define TXB8 0
                 ;#endif
                 ;
                 ;#ifndef UPE
                 ;#define UPE 2
                 ;#endif
                 ;
                 ;#ifndef DOR
                 ;#define DOR 3
                 ;#endif
                 ;
                 ;#ifndef FE
                 ;#define FE 4
                 ;#endif
                 ;
                 ;#ifndef UDRE
                 ;#define UDRE 5
                 ;#endif
                 ;
                 ;#ifndef RXC
                 ;#define RXC 7
                 ;#endif
                 ;
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;
                 ;// USART0 Receiver buffer
                 ;#define RX_BUFFER_SIZE0 8
                 ;char rx_buffer0[RX_BUFFER_SIZE0];
                 ;
                 ;#if RX_BUFFER_SIZE0 <= 256
                 ;unsigned char rx_wr_index0,rx_rd_index0,rx_counter0;
                 ;#else
                 ;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
                 ;#endif
                 ;
                 ;// This flag is set on USART0 Receiver buffer overflow
                 ;bit rx_buffer_overflow0;
                 ;
                 ;// USART0 Receiver interrupt service routine
                 ;interrupt [USART0_RXC] void usart0_rx_isr(void)
                 ; 0000 0047 {
                 
                 	.CSEG
                 _usart0_rx_isr:
00008b 93ea      	ST   -Y,R30
00008c 93fa      	ST   -Y,R31
00008d b7ef      	IN   R30,SREG
00008e 93ea      	ST   -Y,R30
                 ; 0000 0048 char status,data;
                 ; 0000 0049 status=UCSR0A;
00008f 931a      	ST   -Y,R17
000090 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
000091 9110 00c0 	LDS  R17,192
                 ; 0000 004A data=UDR0;
000093 9100 00c6 	LDS  R16,198
                 ; 0000 004B if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
000095 2fe1      	MOV  R30,R17
000096 71ec      	ANDI R30,LOW(0x1C)
000097 f481      	BRNE _0x3
                 ; 0000 004C    {
                 ; 0000 004D    rx_buffer0[rx_wr_index0++]=data;
000098 2de3      	MOV  R30,R3
000099 9433      	INC  R3
00009a e0f0      	LDI  R31,0
00009b 50e0      	SUBI R30,LOW(-_rx_buffer0)
00009c 4ffe      	SBCI R31,HIGH(-_rx_buffer0)
00009d 8300      	ST   Z,R16
                 ; 0000 004E #if RX_BUFFER_SIZE0 == 256
                 ; 0000 004F    // special case for receiver buffer size=256
                 ; 0000 0050    if (++rx_counter0 == 0) rx_buffer_overflow0=1;
                 ; 0000 0051 #else
                 ; 0000 0052    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
00009e e0e8      	LDI  R30,LOW(8)
00009f 15e3      	CP   R30,R3
0000a0 f409      	BRNE _0x4
0000a1 2433      	CLR  R3
                 ; 0000 0053    if (++rx_counter0 == RX_BUFFER_SIZE0)
                 _0x4:
0000a2 9453      	INC  R5
0000a3 e0e8      	LDI  R30,LOW(8)
0000a4 15e5      	CP   R30,R5
0000a5 f411      	BRNE _0x5
                 ; 0000 0054       {
                 ; 0000 0055       rx_counter0=0;
0000a6 2455      	CLR  R5
                 ; 0000 0056       rx_buffer_overflow0=1;
0000a7 9af0      	SBI  0x1E,0
                 ; 0000 0057       }
                 ; 0000 0058 #endif
                 ; 0000 0059    }
                 _0x5:
                 ; 0000 005A }
                 _0x3:
0000a8 9109      	LD   R16,Y+
0000a9 9119      	LD   R17,Y+
0000aa c013      	RJMP _0xFC
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART0 Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 0061 {
                 ; 0000 0062 char data;
                 ; 0000 0063 while (rx_counter0==0);
                 ;	data -> R17
                 ; 0000 0064 data=rx_buffer0[rx_rd_index0++];
                 ; 0000 0065 #if RX_BUFFER_SIZE0 != 256
                 ; 0000 0066 if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
                 ; 0000 0067 #endif
                 ; 0000 0068 #asm("cli")
                 ; 0000 0069 --rx_counter0;
                 ; 0000 006A #asm("sei")
                 ; 0000 006B return data;
                 ; 0000 006C }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART0 Transmitter buffer
                 ;#define TX_BUFFER_SIZE0 8
                 ;char tx_buffer0[TX_BUFFER_SIZE0];
                 ;
                 ;#if TX_BUFFER_SIZE0 <= 256
                 ;unsigned char tx_wr_index0,tx_rd_index0,tx_counter0;
                 ;#else
                 ;unsigned int tx_wr_index0,tx_rd_index0,tx_counter0;
                 ;#endif
                 ;
                 ;// USART0 Transmitter interrupt service routine
                 ;interrupt [USART0_TXC] void usart0_tx_isr(void)
                 ; 0000 007C {
                 _usart0_tx_isr:
0000ab 93ea      	ST   -Y,R30
0000ac 93fa      	ST   -Y,R31
0000ad b7ef      	IN   R30,SREG
0000ae 93ea      	ST   -Y,R30
                 ; 0000 007D if (tx_counter0)
0000af 2066      	TST  R6
0000b0 f069      	BREQ _0xC
                 ; 0000 007E    {
                 ; 0000 007F    --tx_counter0;
0000b1 946a      	DEC  R6
                 ; 0000 0080    UDR0=tx_buffer0[tx_rd_index0++];
0000b2 2de7      	MOV  R30,R7
0000b3 9473      	INC  R7
0000b4 e0f0      	LDI  R31,0
0000b5 5fe8      	SUBI R30,LOW(-_tx_buffer0)
0000b6 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
0000b7 81e0      	LD   R30,Z
0000b8 93e0 00c6 	STS  198,R30
                 ; 0000 0081 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 0082    if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
0000ba e0e8      	LDI  R30,LOW(8)
0000bb 15e7      	CP   R30,R7
0000bc f409      	BRNE _0xD
0000bd 2477      	CLR  R7
                 ; 0000 0083 #endif
                 ; 0000 0084    }
                 _0xD:
                 ; 0000 0085 }
                 _0xC:
                 _0xFC:
0000be 91e9      	LD   R30,Y+
0000bf bfef      	OUT  SREG,R30
0000c0 91f9      	LD   R31,Y+
0000c1 91e9      	LD   R30,Y+
0000c2 9518      	RETI
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART0 Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0000 008C {
                 ; 0000 008D while (tx_counter0 == TX_BUFFER_SIZE0);
                 ;	c -> Y+0
                 ; 0000 008E #asm("cli")
                 ; 0000 008F if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
                 ; 0000 0090    {
                 ; 0000 0091    tx_buffer0[tx_wr_index0++]=c;
                 ; 0000 0092 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 0093    if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
                 ; 0000 0094 #endif
                 ; 0000 0095    ++tx_counter0;
                 ; 0000 0096    }
                 ; 0000 0097 else
                 ; 0000 0098    UDR0=c;
                 ; 0000 0099 #asm("sei")
                 ; 0000 009A }
                 ;#pragma used-
                 ;#endif
                 ;//*************************************************************************************************
                 ;//********************END SERIAL STUFF (USART0)  **************************************************
                 ;//*************************************************************************************************
                 ;//*******   if you need USART1, enable it in Code Wizard and copy coresponding code here  *********
                 ;//*************************************************************************************************
                 ;
                 ;/*
                 ; * Timer 1 Output Compare A interrupt is used to blink LED
                 ; */
                 ;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
                 ; 0000 00A7 {
                 _timer1_compa_isr:
                 ; 0000 00A8 LED1 = ~LED1; // invert LED
0000c3 9b5e      	SBIS 0xB,6
0000c4 c002      	RJMP _0x16
0000c5 985e      	CBI  0xB,6
0000c6 c001      	RJMP _0x17
                 _0x16:
0000c7 9a5e      	SBI  0xB,6
                 _0x17:
                 ; 0000 00A9 }
0000c8 9518      	RETI
                 ;
                 ;// Read the 8 most significant bits
                 ;// of the AD conversion result
                 ;unsigned char read_adc(unsigned char adc_input)
                 ; 0000 00AE {
                 _read_adc:
                 ; 0000 00AF ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
                 ;	adc_input -> Y+0
0000c9 81e8      	LD   R30,Y
0000ca 66e0      	ORI  R30,LOW(0x60)
0000cb 93e0 007c 	STS  124,R30
                 ; 0000 00B0 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 00B1 delay_us(10);
                +
0000cd e483     +LDI R24 , LOW ( 67 )
                +__DELAY_USB_LOOP :
0000ce 958a     +DEC R24
0000cf f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 67
                 ; 0000 00B2 // Start the AD conversion
                 ; 0000 00B3 ADCSRA|=0x40;
0000d0 91e0 007a 	LDS  R30,122
0000d2 64e0      	ORI  R30,0x40
0000d3 93e0 007a 	STS  122,R30
                 ; 0000 00B4 // Wait for the AD conversion to complete
                 ; 0000 00B5 while ((ADCSRA & 0x10)==0);
                 _0x18:
0000d5 91e0 007a 	LDS  R30,122
0000d7 71e0      	ANDI R30,LOW(0x10)
0000d8 f3e1      	BREQ _0x18
                 ; 0000 00B6 ADCSRA|=0x10;
0000d9 91e0 007a 	LDS  R30,122
0000db 61e0      	ORI  R30,0x10
0000dc 93e0 007a 	STS  122,R30
                 ; 0000 00B7 return ADCH;
0000de 91e0 0079 	LDS  R30,121
0000e0 9621      	ADIW R28,1
0000e1 9508      	RET
                 ; 0000 00B8 }
                 ;
                 ;/*
                 ; * main function of program
                 ; */
                 ;
                 ;void main (void)
                 ; 0000 00BF {
                 _main:
                 ; 0000 00C0 int Axa_X;
                 ; 0000 00C1 int Axa_Y;
                 ; 0000 00C2 int axa = 1;
                 ; 0000 00C3 
                 ; 0000 00C4 	Init_initController();  // this must be the first "init" action/call!
                 ;	Axa_X -> R16,R17
                 ;	Axa_Y -> R18,R19
                 ;	axa -> R20,R21
                +
0000e2 e041     +LDI R20 , LOW ( 1 )
0000e3 e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
0000e4 d0e7      	RCALL _Init_initController
                 ; 0000 00C5 	#asm("sei")             // enable interrupts
0000e5 9478      	sei
                 ; 0000 00C6 	LED1 = 1;           	// initial state, will be changed by timer 1
0000e6 9a5e      	SBI  0xB,6
                 ; 0000 00C7 
                 ; 0000 00C8     //Wake pentru accelerometru
                 ; 0000 00C9     PORTB.7 = 1;
0000e7 9a2f      	SBI  0x5,7
                 ; 0000 00CA 
                 ; 0000 00CB 	while(TRUE)
                 _0x1F:
                 ; 0000 00CC 	{
                 ; 0000 00CD         switch(axa)
0000e8 01fa      	MOVW R30,R20
                 ; 0000 00CE         {
                 ; 0000 00CF          case 1:
0000e9 30e1      	CPI  R30,LOW(0x1)
0000ea e0a0      	LDI  R26,HIGH(0x1)
0000eb 07fa      	CPC  R31,R26
0000ec f011      	BREQ PC+3
0000ed 940c 015d 	JMP _0x25
                 ; 0000 00D0          Axa_Y = read_adc(0);
0000ef e0e0      	LDI  R30,LOW(0)
0000f0 93ea      	ST   -Y,R30
0000f1 dfd7      	RCALL _read_adc
0000f2 2f2e      	MOV  R18,R30
0000f3 2733      	CLR  R19
                 ; 0000 00D1          delay_ms(10);
0000f4 940e 0244 	CALL SUBOPT_0x0
                 ; 0000 00D2 
                 ; 0000 00D3          //Cazul in care bolobocul este centrat pe axa Y
                 ; 0000 00D4           if (Axa_Y > 100 && Axa_Y < 110) {
                +
0000f6 3625     +CPI R18 , LOW ( 101 )
0000f7 e0e0     +LDI R30 , HIGH ( 101 )
0000f8 073e     +CPC R19 , R30
                 	__CPWRN 18,19,101
0000f9 f024      	BRLT _0x27
                +
0000fa 362e     +CPI R18 , LOW ( 110 )
0000fb e0e0     +LDI R30 , HIGH ( 110 )
0000fc 073e     +CPC R19 , R30
                 	__CPWRN 18,19,110
0000fd f00c      	BRLT _0x28
                 _0x27:
0000fe c008      	RJMP _0x26
                 _0x28:
                 ; 0000 00D5             //Aprind ledul alb din centru
                 ; 0000 00D6             PORTC.7 = 1;
0000ff 9a47      	SBI  0x8,7
                 ; 0000 00D7 
                 ; 0000 00D8             //Sting ledurile de pe axa Y
                 ; 0000 00D9             PORTC.0 = 0;
000100 9840      	CBI  0x8,0
                 ; 0000 00DA             PORTC.1 = 0;
000101 9841      	CBI  0x8,1
                 ; 0000 00DB             PORTC.2 = 0;
000102 9842      	CBI  0x8,2
                 ; 0000 00DC             PORTC.4 = 0;
000103 9844      	CBI  0x8,4
                 ; 0000 00DD             PORTC.3 = 0;
000104 9843      	CBI  0x8,3
                 ; 0000 00DE             PORTC.5 = 0;
000105 9845      	CBI  0x8,5
                 ; 0000 00DF           }
                 ; 0000 00E0           else PORTC.7 = 0;
000106 c001      	RJMP _0x37
                 _0x26:
000107 9847      	CBI  0x8,7
                 ; 0000 00E1 
                 ; 0000 00E2          //Cazul in care bolobocul este inclinat sub 30 de grade pe axa Y
                 ; 0000 00E3          if (Axa_Y >= 110 && Axa_Y < 125) {
                 _0x37:
                +
000108 362e     +CPI R18 , LOW ( 110 )
000109 e0e0     +LDI R30 , HIGH ( 110 )
00010a 073e     +CPC R19 , R30
                 	__CPWRN 18,19,110
00010b f024      	BRLT _0x3B
                +
00010c 372d     +CPI R18 , LOW ( 125 )
00010d e0e0     +LDI R30 , HIGH ( 125 )
00010e 073e     +CPC R19 , R30
                 	__CPWRN 18,19,125
00010f f00c      	BRLT _0x3C
                 _0x3B:
000110 c006      	RJMP _0x3A
                 _0x3C:
                 ; 0000 00E4             //Aprind ledul verde
                 ; 0000 00E5             PORTC.2 = 1;
000111 9a42      	SBI  0x8,2
                 ; 0000 00E6 
                 ; 0000 00E7             //Sting restul ledurilor de pe axa Y
                 ; 0000 00E8             PORTC.0 = 0;
000112 9840      	CBI  0x8,0
                 ; 0000 00E9             PORTC.1 = 0;
000113 9841      	CBI  0x8,1
                 ; 0000 00EA             PORTC.3 = 0;
000114 9843      	CBI  0x8,3
                 ; 0000 00EB             PORTC.4 = 0;
000115 9844      	CBI  0x8,4
                 ; 0000 00EC             PORTC.5 = 0;
000116 9845      	CBI  0x8,5
                 ; 0000 00ED          }
                 ; 0000 00EE 
                 ; 0000 00EF          if (Axa_Y >85 && Axa_Y <= 100) {
                 _0x3A:
                +
000117 3526     +CPI R18 , LOW ( 86 )
000118 e0e0     +LDI R30 , HIGH ( 86 )
000119 073e     +CPC R19 , R30
                 	__CPWRN 18,19,86
00011a f024      	BRLT _0x4A
                +
00011b 3625     +CPI R18 , LOW ( 101 )
00011c e0e0     +LDI R30 , HIGH ( 101 )
00011d 073e     +CPC R19 , R30
                 	__CPWRN 18,19,101
00011e f00c      	BRLT _0x4B
                 _0x4A:
00011f c006      	RJMP _0x49
                 _0x4B:
                 ; 0000 00F0             //Aprind ledul verde
                 ; 0000 00F1             PORTC.3 = 1;
000120 9a43      	SBI  0x8,3
                 ; 0000 00F2 
                 ; 0000 00F3             //Sting restul ledurilor de pe axa Y
                 ; 0000 00F4             PORTC.0 = 0;
000121 9840      	CBI  0x8,0
                 ; 0000 00F5             PORTC.1 = 0;
000122 9841      	CBI  0x8,1
                 ; 0000 00F6             PORTC.2 = 0;
000123 9842      	CBI  0x8,2
                 ; 0000 00F7             PORTC.4 = 0;
000124 9844      	CBI  0x8,4
                 ; 0000 00F8             PORTC.5 = 0;
000125 9845      	CBI  0x8,5
                 ; 0000 00F9          }
                 ; 0000 00FA 
                 ; 0000 00FB          //Cazul in care bolobocul este inclinat intre 30-45 de grade pe axa Y
                 ; 0000 00FC          if (Axa_Y >= 125 && Axa_Y < 140) {
                 _0x49:
                +
000126 372d     +CPI R18 , LOW ( 125 )
000127 e0e0     +LDI R30 , HIGH ( 125 )
000128 073e     +CPC R19 , R30
                 	__CPWRN 18,19,125
000129 f024      	BRLT _0x59
                +
00012a 382c     +CPI R18 , LOW ( 140 )
00012b e0e0     +LDI R30 , HIGH ( 140 )
00012c 073e     +CPC R19 , R30
                 	__CPWRN 18,19,140
00012d f00c      	BRLT _0x5A
                 _0x59:
00012e c006      	RJMP _0x58
                 _0x5A:
                 ; 0000 00FD             //Aprind ledul galben
                 ; 0000 00FE             PORTC.1 = 1;
00012f 9a41      	SBI  0x8,1
                 ; 0000 00FF 
                 ; 0000 0100             //Sting restul ledurilor de pe axa Y
                 ; 0000 0101             PORTC.0 = 0;
000130 9840      	CBI  0x8,0
                 ; 0000 0102             PORTC.2 = 0;
000131 9842      	CBI  0x8,2
                 ; 0000 0103             PORTC.3 = 0;
000132 9843      	CBI  0x8,3
                 ; 0000 0104             PORTC.4 = 0;
000133 9844      	CBI  0x8,4
                 ; 0000 0105             PORTC.5 = 0;
000134 9845      	CBI  0x8,5
                 ; 0000 0106          }
                 ; 0000 0107 
                 ; 0000 0108          if (Axa_Y > 70 && Axa_Y <= 85) {
                 _0x58:
                +
000135 3427     +CPI R18 , LOW ( 71 )
000136 e0e0     +LDI R30 , HIGH ( 71 )
000137 073e     +CPC R19 , R30
                 	__CPWRN 18,19,71
000138 f024      	BRLT _0x68
                +
000139 3526     +CPI R18 , LOW ( 86 )
00013a e0e0     +LDI R30 , HIGH ( 86 )
00013b 073e     +CPC R19 , R30
                 	__CPWRN 18,19,86
00013c f00c      	BRLT _0x69
                 _0x68:
00013d c006      	RJMP _0x67
                 _0x69:
                 ; 0000 0109             //Aprind ledul galben
                 ; 0000 010A             PORTC.4 = 1;
00013e 9a44      	SBI  0x8,4
                 ; 0000 010B 
                 ; 0000 010C             //Sting restul ledurilor de pe axa Y
                 ; 0000 010D             PORTC.0 = 0;
00013f 9840      	CBI  0x8,0
                 ; 0000 010E             PORTC.1 = 0;
000140 9841      	CBI  0x8,1
                 ; 0000 010F             PORTC.2 = 0;
000141 9842      	CBI  0x8,2
                 ; 0000 0110             PORTC.3 = 0;
000142 9843      	CBI  0x8,3
                 ; 0000 0111             PORTC.5 = 0;
000143 9845      	CBI  0x8,5
                 ; 0000 0112          }
                 ; 0000 0113 
                 ; 0000 0114          //Cazul in care bolobocul este inclinat la peste 45 de grade pe axa Y
                 ; 0000 0115          if (Axa_Y >= 140) {
                 _0x67:
                +
000144 382c     +CPI R18 , LOW ( 140 )
000145 e0e0     +LDI R30 , HIGH ( 140 )
000146 073e     +CPC R19 , R30
                 	__CPWRN 18,19,140
000147 f034      	BRLT _0x76
                 ; 0000 0116             //Aprind ledul rosu
                 ; 0000 0117             PORTC.0 = 1;
000148 9a40      	SBI  0x8,0
                 ; 0000 0118 
                 ; 0000 0119             //Sting restul ledurilor de pe axa Y
                 ; 0000 011A             PORTC.1 = 0;
000149 9841      	CBI  0x8,1
                 ; 0000 011B             PORTC.2 = 0;
00014a 9842      	CBI  0x8,2
                 ; 0000 011C             PORTC.3 = 0;
00014b 9843      	CBI  0x8,3
                 ; 0000 011D             PORTC.4 = 0;
00014c 9844      	CBI  0x8,4
                 ; 0000 011E             PORTC.5 = 0;
00014d 9845      	CBI  0x8,5
                 ; 0000 011F          }
                 ; 0000 0120 
                 ; 0000 0121          if (Axa_Y <= 70) {
                 _0x76:
                +
00014e 3427     +CPI R18 , LOW ( 71 )
00014f e0e0     +LDI R30 , HIGH ( 71 )
000150 073e     +CPC R19 , R30
                 	__CPWRN 18,19,71
000151 f434      	BRGE _0x83
                 ; 0000 0122             //Aprind ledul rosu
                 ; 0000 0123             PORTC.5 = 1;
000152 9a45      	SBI  0x8,5
                 ; 0000 0124 
                 ; 0000 0125             //Sting restul ledurilor de pe axa Y
                 ; 0000 0126             PORTC.0 = 0;
000153 9840      	CBI  0x8,0
                 ; 0000 0127             PORTC.1 = 0;
000154 9841      	CBI  0x8,1
                 ; 0000 0128             PORTC.2 = 0;
000155 9842      	CBI  0x8,2
                 ; 0000 0129             PORTC.3 = 0;
000156 9843      	CBI  0x8,3
                 ; 0000 012A             PORTC.4 = 0;
000157 9844      	CBI  0x8,4
                 ; 0000 012B          }
                 ; 0000 012C 
                 ; 0000 012D          delay_ms(200);
                 _0x83:
000158 940e 024a 	CALL SUBOPT_0x1
                 ; 0000 012E          axa = 2;
                +
00015a e042     +LDI R20 , LOW ( 2 )
00015b e050     +LDI R21 , HIGH ( 2 )
                 	__GETWRN 20,21,2
                 ; 0000 012F          break;
00015c c06d      	RJMP _0x24
                 ; 0000 0130 
                 ; 0000 0131          case 2:
                 _0x25:
00015d 30e2      	CPI  R30,LOW(0x2)
00015e e0a0      	LDI  R26,HIGH(0x2)
00015f 07fa      	CPC  R31,R26
000160 f011      	BREQ PC+3
000161 940c 01ca 	JMP _0x24
                 ; 0000 0132          Axa_X = read_adc(1);
000163 e0e1      	LDI  R30,LOW(1)
000164 93ea      	ST   -Y,R30
000165 df63      	RCALL _read_adc
000166 2f0e      	MOV  R16,R30
000167 2711      	CLR  R17
                 ; 0000 0133          delay_ms(10);
000168 940e 0244 	CALL SUBOPT_0x0
                 ; 0000 0134 
                 ; 0000 0135          //Cazul in care bolobocul este centrat pe axa X
                 ; 0000 0136 	    if (Axa_X > 90 && Axa_X < 100) {
                +
00016a 350b     +CPI R16 , LOW ( 91 )
00016b e0e0     +LDI R30 , HIGH ( 91 )
00016c 071e     +CPC R17 , R30
                 	__CPWRN 16,17,91
00016d f024      	BRLT _0x92
                +
00016e 3604     +CPI R16 , LOW ( 100 )
00016f e0e0     +LDI R30 , HIGH ( 100 )
000170 071e     +CPC R17 , R30
                 	__CPWRN 16,17,100
000171 f00c      	BRLT _0x93
                 _0x92:
000172 c006      	RJMP _0x91
                 _0x93:
                 ; 0000 0137 	        //Aprind ledul alb din centru
                 ; 0000 0138 	    	PORTC.7 = 1;
000173 9a47      	SBI  0x8,7
                 ; 0000 0139 
                 ; 0000 013A 	    	//Sting ledurile de pe axa X
                 ; 0000 013B 	    	PORTB.0 = 0;
000174 940e 0250 	CALL SUBOPT_0x2
                 ; 0000 013C 	    	PORTB.1 = 0;
                 ; 0000 013D 	    	PORTB.2 = 0;
                 ; 0000 013E 	    	PORTB.3 = 0;
                 ; 0000 013F 	    	PORTB.4 = 0;
000176 982c      	CBI  0x5,4
                 ; 0000 0140 	    	PORTB.5 = 0;
000177 982d      	CBI  0x5,5
                 ; 0000 0141 	    }
                 ; 0000 0142         else PORTC.7 = 0;
000178 c001      	RJMP _0xA2
                 _0x91:
000179 9847      	CBI  0x8,7
                 ; 0000 0143 
                 ; 0000 0144         //Cazul in care bolobocul este inclinat sub 30 grade pe axa X
                 ; 0000 0145         if (Axa_X >= 100 && Axa_X < 115) {
                 _0xA2:
                +
00017a 3604     +CPI R16 , LOW ( 100 )
00017b e0e0     +LDI R30 , HIGH ( 100 )
00017c 071e     +CPC R17 , R30
                 	__CPWRN 16,17,100
00017d f024      	BRLT _0xA6
                +
00017e 3703     +CPI R16 , LOW ( 115 )
00017f e0e0     +LDI R30 , HIGH ( 115 )
000180 071e     +CPC R17 , R30
                 	__CPWRN 16,17,115
000181 f00c      	BRLT _0xA7
                 _0xA6:
000182 c006      	RJMP _0xA5
                 _0xA7:
                 ; 0000 0146             //Aprind ledul verde
                 ; 0000 0147             PORTB.2 = 1;
000183 9a2a      	SBI  0x5,2
                 ; 0000 0148 
                 ; 0000 0149             //Sting restul ledurilor de pe axa X
                 ; 0000 014A             PORTB.0 = 0;
000184 9828      	CBI  0x5,0
                 ; 0000 014B             PORTB.1 = 0;
000185 9829      	CBI  0x5,1
                 ; 0000 014C             PORTB.3 = 0;
000186 982b      	CBI  0x5,3
                 ; 0000 014D             PORTB.4 = 0;
000187 982c      	CBI  0x5,4
                 ; 0000 014E             PORTB.5 = 0;
000188 982d      	CBI  0x5,5
                 ; 0000 014F         }
                 ; 0000 0150 
                 ; 0000 0151         if (Axa_X > 75 && Axa_X <= 90) {
                 _0xA5:
                +
000189 340c     +CPI R16 , LOW ( 76 )
00018a e0e0     +LDI R30 , HIGH ( 76 )
00018b 071e     +CPC R17 , R30
                 	__CPWRN 16,17,76
00018c f024      	BRLT _0xB5
                +
00018d 350b     +CPI R16 , LOW ( 91 )
00018e e0e0     +LDI R30 , HIGH ( 91 )
00018f 071e     +CPC R17 , R30
                 	__CPWRN 16,17,91
000190 f00c      	BRLT _0xB6
                 _0xB5:
000191 c006      	RJMP _0xB4
                 _0xB6:
                 ; 0000 0152             //Aprind ledul verde
                 ; 0000 0153             PORTB.3 = 1;
000192 9a2b      	SBI  0x5,3
                 ; 0000 0154 
                 ; 0000 0155             //Sting restul ledurilor de pe axa X
                 ; 0000 0156             PORTB.0 = 0;
000193 9828      	CBI  0x5,0
                 ; 0000 0157             PORTB.1 = 0;
000194 9829      	CBI  0x5,1
                 ; 0000 0158             PORTB.2 = 0;
000195 982a      	CBI  0x5,2
                 ; 0000 0159             PORTB.4 = 0;
000196 982c      	CBI  0x5,4
                 ; 0000 015A             PORTB.5 = 0;
000197 982d      	CBI  0x5,5
                 ; 0000 015B         }
                 ; 0000 015C 
                 ; 0000 015D         //Cazul in care bolobocul este inclinat intre 30-45 grade pe axa X
                 ; 0000 015E         if (Axa_X >= 115 && Axa_X < 130) {
                 _0xB4:
                +
000198 3703     +CPI R16 , LOW ( 115 )
000199 e0e0     +LDI R30 , HIGH ( 115 )
00019a 071e     +CPC R17 , R30
                 	__CPWRN 16,17,115
00019b f024      	BRLT _0xC4
                +
00019c 3802     +CPI R16 , LOW ( 130 )
00019d e0e0     +LDI R30 , HIGH ( 130 )
00019e 071e     +CPC R17 , R30
                 	__CPWRN 16,17,130
00019f f00c      	BRLT _0xC5
                 _0xC4:
0001a0 c006      	RJMP _0xC3
                 _0xC5:
                 ; 0000 015F             //Aprind ledul galben
                 ; 0000 0160             PORTB.1 = 1;
0001a1 9a29      	SBI  0x5,1
                 ; 0000 0161 
                 ; 0000 0162             //Sting restul ledurilor de pe axa X
                 ; 0000 0163             PORTB.0 = 0;
0001a2 9828      	CBI  0x5,0
                 ; 0000 0164             PORTB.2 = 0;
0001a3 982a      	CBI  0x5,2
                 ; 0000 0165             PORTB.3 = 0;
0001a4 982b      	CBI  0x5,3
                 ; 0000 0166             PORTB.4 = 0;
0001a5 982c      	CBI  0x5,4
                 ; 0000 0167             PORTB.5 = 0;
0001a6 982d      	CBI  0x5,5
                 ; 0000 0168         }
                 ; 0000 0169 
                 ; 0000 016A         if (Axa_X > 60 && Axa_X <= 75) {
                 _0xC3:
                +
0001a7 330d     +CPI R16 , LOW ( 61 )
0001a8 e0e0     +LDI R30 , HIGH ( 61 )
0001a9 071e     +CPC R17 , R30
                 	__CPWRN 16,17,61
0001aa f024      	BRLT _0xD3
                +
0001ab 340c     +CPI R16 , LOW ( 76 )
0001ac e0e0     +LDI R30 , HIGH ( 76 )
0001ad 071e     +CPC R17 , R30
                 	__CPWRN 16,17,76
0001ae f00c      	BRLT _0xD4
                 _0xD3:
0001af c004      	RJMP _0xD2
                 _0xD4:
                 ; 0000 016B             //Aprind ledul galben
                 ; 0000 016C             PORTB.4 = 1;
0001b0 9a2c      	SBI  0x5,4
                 ; 0000 016D 
                 ; 0000 016E             //Sting restul ledurilor de pe axa X
                 ; 0000 016F             PORTB.0 = 0;
0001b1 940e 0250 	CALL SUBOPT_0x2
                 ; 0000 0170             PORTB.1 = 0;
                 ; 0000 0171             PORTB.2 = 0;
                 ; 0000 0172             PORTB.3 = 0;
                 ; 0000 0173             PORTB.5 = 0;
0001b3 982d      	CBI  0x5,5
                 ; 0000 0174         }
                 ; 0000 0175 
                 ; 0000 0176         //Cazul in care bolobocul este inclinat la peste 45 de grade pe axa X
                 ; 0000 0177         if (Axa_X >= 130) {
                 _0xD2:
                +
0001b4 3802     +CPI R16 , LOW ( 130 )
0001b5 e0e0     +LDI R30 , HIGH ( 130 )
0001b6 071e     +CPC R17 , R30
                 	__CPWRN 16,17,130
0001b7 f034      	BRLT _0xE1
                 ; 0000 0178             //Aprind ledul rosu
                 ; 0000 0179             PORTB.0 = 1;
0001b8 9a28      	SBI  0x5,0
                 ; 0000 017A 
                 ; 0000 017B             //Sting restul ledurilor de pe axa X
                 ; 0000 017C             PORTB.1 = 0;
0001b9 9829      	CBI  0x5,1
                 ; 0000 017D             PORTB.2 = 0;
0001ba 982a      	CBI  0x5,2
                 ; 0000 017E             PORTB.3 = 0;
0001bb 982b      	CBI  0x5,3
                 ; 0000 017F             PORTB.4 = 0;
0001bc 982c      	CBI  0x5,4
                 ; 0000 0180             PORTB.5 = 0;
0001bd 982d      	CBI  0x5,5
                 ; 0000 0181         }
                 ; 0000 0182 
                 ; 0000 0183         if (Axa_X <= 60) {
                 _0xE1:
                +
0001be 330d     +CPI R16 , LOW ( 61 )
0001bf e0e0     +LDI R30 , HIGH ( 61 )
0001c0 071e     +CPC R17 , R30
                 	__CPWRN 16,17,61
0001c1 f424      	BRGE _0xEE
                 ; 0000 0184             //Aprind ledul rosu
                 ; 0000 0185             PORTB.5 = 1;
0001c2 9a2d      	SBI  0x5,5
                 ; 0000 0186 
                 ; 0000 0187             //Sting restul ledurilor de pe axa X
                 ; 0000 0188             PORTB.0 = 0;
0001c3 940e 0250 	CALL SUBOPT_0x2
                 ; 0000 0189             PORTB.1 = 0;
                 ; 0000 018A             PORTB.2 = 0;
                 ; 0000 018B             PORTB.3 = 0;
                 ; 0000 018C             PORTB.4 = 0;
0001c5 982c      	CBI  0x5,4
                 ; 0000 018D         }
                 ; 0000 018E         delay_ms(200);
                 _0xEE:
0001c6 940e 024a 	CALL SUBOPT_0x1
                 ; 0000 018F         axa = 1;
                +
0001c8 e041     +LDI R20 , LOW ( 1 )
0001c9 e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
                 ; 0000 0190         break;
                 ; 0000 0191         }// end switch
                 _0x24:
                 ; 0000 0192     }// end while
0001ca cf1d      	RJMP _0x1F
                 ; 0000 0193 }// end main loop
                 _0xFB:
0001cb cfff      	RJMP _0xFB
                 ;
                 ;
                 ;/* initialization file */
                 ;
                 ;#include <mega164a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include "defs.h"
                 ;
                 ;
                 ;/*
                 ; * most intialization values are generated using Code Wizard and depend on clock value
                 ; */
                 ;void Init_initController(void)
                 ; 0001 000B {
                 
                 	.CSEG
                 _Init_initController:
                 ; 0001 000C // Crystal Oscillator division factor: 1
                 ; 0001 000D #pragma optsize-
                 ; 0001 000E CLKPR=0x80;
0001cc e8e0      	LDI  R30,LOW(128)
0001cd 93e0 0061 	STS  97,R30
                 ; 0001 000F CLKPR=0x00;
0001cf e0e0      	LDI  R30,LOW(0)
0001d0 93e0 0061 	STS  97,R30
                 ; 0001 0010 #ifdef _OPTIMIZE_SIZE_
                 ; 0001 0011 #pragma optsize+
                 ; 0001 0012 #endif
                 ; 0001 0013 
                 ; 0001 0014 // Input/Output Ports initialization
                 ; 0001 0015 // Port A initialization
                 ; 0001 0016 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0001 0017 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0001 0018 PORTA=0x00;
0001d2 b9e2      	OUT  0x2,R30
                 ; 0001 0019 DDRA=0x00;
0001d3 b9e1      	OUT  0x1,R30
                 ; 0001 001A 
                 ; 0001 001B // Port B initialization
                 ; 0001 001C PORTB=0xFF;
0001d4 efef      	LDI  R30,LOW(255)
0001d5 b9e5      	OUT  0x5,R30
                 ; 0001 001D DDRB=0xFF;
0001d6 b9e4      	OUT  0x4,R30
                 ; 0001 001E 
                 ; 0001 001F // Port C initialization
                 ; 0001 0020 PORTC=0xFF;
0001d7 b9e8      	OUT  0x8,R30
                 ; 0001 0021 DDRC=0xFF;
0001d8 b9e7      	OUT  0x7,R30
                 ; 0001 0022 
                 ; 0001 0023 // Port D initialization
                 ; 0001 0024 PORTD=0b00100000; // D.5 needs pull-up resistor
0001d9 e2e0      	LDI  R30,LOW(32)
0001da b9eb      	OUT  0xB,R30
                 ; 0001 0025 DDRD= 0b01010000; // D.6 is LED, D.4 is test output
0001db e5e0      	LDI  R30,LOW(80)
0001dc b9ea      	OUT  0xA,R30
                 ; 0001 0026 
                 ; 0001 0027 // Timer/Counter 0 initialization
                 ; 0001 0028 // Clock source: System Clock
                 ; 0001 0029 // Clock value: Timer 0 Stopped
                 ; 0001 002A // Mode: Normal top=FFh
                 ; 0001 002B // OC0 output: Disconnected
                 ; 0001 002C TCCR0A=0x00;
0001dd e0e0      	LDI  R30,LOW(0)
0001de bde4      	OUT  0x24,R30
                 ; 0001 002D TCCR0B=0x00;
0001df bde5      	OUT  0x25,R30
                 ; 0001 002E TCNT0=0x00;
0001e0 bde6      	OUT  0x26,R30
                 ; 0001 002F OCR0A=0x00;
0001e1 bde7      	OUT  0x27,R30
                 ; 0001 0030 OCR0B=0x00;
0001e2 bde8      	OUT  0x28,R30
                 ; 0001 0031 
                 ; 0001 0032 // Timer/Counter 1 initialization
                 ; 0001 0033 // Clock source: System Clock
                 ; 0001 0034 // Clock value: 19.531 kHz = CLOCK/256
                 ; 0001 0035 // Mode: CTC top=OCR1A
                 ; 0001 0036 // OC1A output: Discon.
                 ; 0001 0037 // OC1B output: Discon.
                 ; 0001 0038 // Noise Canceler: Off
                 ; 0001 0039 // Input Capture on Falling Edge
                 ; 0001 003A // Timer 1 Overflow Interrupt: Off
                 ; 0001 003B // Input Capture Interrupt: Off
                 ; 0001 003C // Compare A Match Interrupt: On
                 ; 0001 003D // Compare B Match Interrupt: Off
                 ; 0001 003E 
                 ; 0001 003F TCCR1A=0x00;
0001e3 93e0 0080 	STS  128,R30
                 ; 0001 0040 TCCR1B=0x0D;
0001e5 e0ed      	LDI  R30,LOW(13)
0001e6 93e0 0081 	STS  129,R30
                 ; 0001 0041 TCNT1H=0x00;
0001e8 e0e0      	LDI  R30,LOW(0)
0001e9 93e0 0085 	STS  133,R30
                 ; 0001 0042 TCNT1L=0x00;
0001eb 93e0 0084 	STS  132,R30
                 ; 0001 0043 ICR1H=0x00;
0001ed 93e0 0087 	STS  135,R30
                 ; 0001 0044 ICR1L=0x00;
0001ef 93e0 0086 	STS  134,R30
                 ; 0001 0045 
                 ; 0001 0046 // 1 sec = 19531 counts = 4C41H counts, from 0 to 4C40
                 ; 0001 0047 // 4C40H = 4CH (MSB) and 40H (LSB)
                 ; 0001 0048 OCR1AH=0x4C;
0001f1 e4ec      	LDI  R30,LOW(76)
0001f2 93e0 0089 	STS  137,R30
                 ; 0001 0049 OCR1AL=0x40;
0001f4 e4e0      	LDI  R30,LOW(64)
0001f5 93e0 0088 	STS  136,R30
                 ; 0001 004A 
                 ; 0001 004B OCR1BH=0x00;
0001f7 e0e0      	LDI  R30,LOW(0)
0001f8 93e0 008b 	STS  139,R30
                 ; 0001 004C OCR1BL=0x00;
0001fa 93e0 008a 	STS  138,R30
                 ; 0001 004D 
                 ; 0001 004E // Timer/Counter 2 initialization
                 ; 0001 004F // Clock source: System Clock
                 ; 0001 0050 // Clock value: Timer2 Stopped
                 ; 0001 0051 // Mode: Normal top=0xFF
                 ; 0001 0052 // OC2A output: Disconnected
                 ; 0001 0053 // OC2B output: Disconnected
                 ; 0001 0054 ASSR=0x00;
0001fc 93e0 00b6 	STS  182,R30
                 ; 0001 0055 TCCR2A=0x00;
0001fe 93e0 00b0 	STS  176,R30
                 ; 0001 0056 TCCR2B=0x00;
000200 93e0 00b1 	STS  177,R30
                 ; 0001 0057 TCNT2=0x00;
000202 93e0 00b2 	STS  178,R30
                 ; 0001 0058 OCR2A=0x00;
000204 93e0 00b3 	STS  179,R30
                 ; 0001 0059 OCR2B=0x00;
000206 93e0 00b4 	STS  180,R30
                 ; 0001 005A 
                 ; 0001 005B // External Interrupt(s) initialization
                 ; 0001 005C // INT0: Off
                 ; 0001 005D // INT1: Off
                 ; 0001 005E // INT2: Off
                 ; 0001 005F // Interrupt on any change on pins PCINT0-7: Off
                 ; 0001 0060 // Interrupt on any change on pins PCINT8-15: Off
                 ; 0001 0061 // Interrupt on any change on pins PCINT16-23: Off
                 ; 0001 0062 // Interrupt on any change on pins PCINT24-31: Off
                 ; 0001 0063 EICRA=0x00;
000208 93e0 0069 	STS  105,R30
                 ; 0001 0064 EIMSK=0x00;
00020a bbed      	OUT  0x1D,R30
                 ; 0001 0065 PCICR=0x00;
00020b 93e0 0068 	STS  104,R30
                 ; 0001 0066 
                 ; 0001 0067 // Timer/Counter 0,1,2 Interrupt(s) initialization
                 ; 0001 0068 TIMSK0=0x00;
00020d 93e0 006e 	STS  110,R30
                 ; 0001 0069 TIMSK1=0x02;
00020f e0e2      	LDI  R30,LOW(2)
000210 93e0 006f 	STS  111,R30
                 ; 0001 006A TIMSK2=0x00;
000212 e0e0      	LDI  R30,LOW(0)
000213 93e0 0070 	STS  112,R30
                 ; 0001 006B 
                 ; 0001 006C // USART0 initialization
                 ; 0001 006D // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0001 006E // USART0 Receiver: On
                 ; 0001 006F // USART0 Transmitter: On
                 ; 0001 0070 // USART0 Mode: Asynchronous
                 ; 0001 0071 // USART0 Baud rate: 9600
                 ; 0001 0072 UCSR0A=0x00;
000215 93e0 00c0 	STS  192,R30
                 ; 0001 0073 UCSR0B=0xD8;
000217 ede8      	LDI  R30,LOW(216)
000218 93e0 00c1 	STS  193,R30
                 ; 0001 0074 UCSR0C=0x06;
00021a e0e6      	LDI  R30,LOW(6)
00021b 93e0 00c2 	STS  194,R30
                 ; 0001 0075 UBRR0H=0x00;
00021d e0e0      	LDI  R30,LOW(0)
00021e 93e0 00c5 	STS  197,R30
                 ; 0001 0076 UBRR0L=0x81;
000220 e8e1      	LDI  R30,LOW(129)
000221 93e0 00c4 	STS  196,R30
                 ; 0001 0077 
                 ; 0001 0078 // USART1 initialization
                 ; 0001 0079 // USART1 disabled
                 ; 0001 007A UCSR1B=0x00;
000223 e0e0      	LDI  R30,LOW(0)
000224 93e0 00c9 	STS  201,R30
                 ; 0001 007B 
                 ; 0001 007C 
                 ; 0001 007D // Analog Comparator initialization
                 ; 0001 007E // Analog Comparator: Off
                 ; 0001 007F // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0001 0080 ACSR=0x80;
000226 e8e0      	LDI  R30,LOW(128)
000227 bfe0      	OUT  0x30,R30
                 ; 0001 0081 ADCSRB=0x00;
000228 e0e0      	LDI  R30,LOW(0)
000229 93e0 007b 	STS  123,R30
                 ; 0001 0082 DIDR1=0x00;
00022b 93e0 007f 	STS  127,R30
                 ; 0001 0083 
                 ; 0001 0084 // ADC initialization
                 ; 0001 0085 // ADC Clock frequency: 156,250 kHz
                 ; 0001 0086 // ADC Voltage Reference: AVCC pin
                 ; 0001 0087 // ADC Auto Trigger Source: Free Running
                 ; 0001 0088 // Only the 8 most significant bits of
                 ; 0001 0089 // the AD conversion result are used
                 ; 0001 008A // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
                 ; 0001 008B // ADC4: On, ADC5: On, ADC6: On, ADC7: On
                 ; 0001 008C DIDR0=0x00;
00022d 93e0 007e 	STS  126,R30
                 ; 0001 008D ADMUX=ADC_VREF_TYPE & 0xff;
00022f e6e0      	LDI  R30,LOW(96)
000230 93e0 007c 	STS  124,R30
                 ; 0001 008E ADCSRA=0xA7;
000232 eae7      	LDI  R30,LOW(167)
000233 93e0 007a 	STS  122,R30
                 ; 0001 008F ADCSRB&=0xF8;
000235 91e0 007b 	LDS  R30,123
000237 7fe8      	ANDI R30,LOW(0xF8)
000238 93e0 007b 	STS  123,R30
                 ; 0001 0090 
                 ; 0001 0091 // SPI initialization
                 ; 0001 0092 // SPI disabled
                 ; 0001 0093 SPCR=0x00;
00023a e0e0      	LDI  R30,LOW(0)
00023b bdec      	OUT  0x2C,R30
                 ; 0001 0094 
                 ; 0001 0095 // TWI initialization
                 ; 0001 0096 // TWI disabled
                 ; 0001 0097 
                 ; 0001 0098 
                 ; 0001 0099 // Watchdog Timer initialization
                 ; 0001 009A // Watchdog Timer Prescaler: OSC/2048
                 ; 0001 009B #pragma optsize-
                 ; 0001 009C #asm("wdr")
00023c 95a8      	wdr
                 ; 0001 009D // Write 2 consecutive values to enable watchdog
                 ; 0001 009E // this is NOT a mistake !
                 ; 0001 009F WDTCSR=0x18;
00023d e1e8      	LDI  R30,LOW(24)
00023e 93e0 0060 	STS  96,R30
                 ; 0001 00A0 WDTCSR=0x08;
000240 e0e8      	LDI  R30,LOW(8)
000241 93e0 0060 	STS  96,R30
                 ; 0001 00A1 #ifdef _OPTIMIZE_SIZE_
                 ; 0001 00A2 #pragma optsize+
                 ; 0001 00A3 #endif
                 ; 0001 00A4 
                 ; 0001 00A5 }
000243 9508      	RET
                 ;
                 ;
                 ;
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _rx_buffer0:
000200           	.BYTE 0x8
                 _tx_buffer0:
000208           	.BYTE 0x8
                 __seed_G102:
000210           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000244 e0ea      	LDI  R30,LOW(10)
000245 e0f0      	LDI  R31,HIGH(10)
000246 93fa      	ST   -Y,R31
000247 93ea      	ST   -Y,R30
000248 940c 0255 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
00024a ece8      	LDI  R30,LOW(200)
00024b e0f0      	LDI  R31,HIGH(200)
00024c 93fa      	ST   -Y,R31
00024d 93ea      	ST   -Y,R30
00024e 940c 0255 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000250 9828      	CBI  0x5,0
000251 9829      	CBI  0x5,1
000252 982a      	CBI  0x5,2
000253 982b      	CBI  0x5,3
000254 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000255 91e9      	ld   r30,y+
000256 91f9      	ld   r31,y+
000257 9630      	adiw r30,0
000258 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000259 e888     +LDI R24 , LOW ( 0x1388 )
00025a e193     +LDI R25 , HIGH ( 0x1388 )
                +__DELAY_USW_LOOP :
00025b 9701     +SBIW R24 , 1
00025c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x1388
00025d 95a8      	wdr
00025e 9731      	sbiw r30,1
00025f f7c9      	brne __delay_ms0
                 __delay_ms1:
000260 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega164A register use summary:
r0 :   4 r1 :   1 r2 :   0 r3 :   4 r4 :   0 r5 :   3 r6 :   2 r7 :   4 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  17 r17:  17 r18:  13 r19:  13 r20:   4 r21:   3 r22:   2 r23:   0 
r24:  11 r25:   3 r26:  10 r27:   3 r28:   2 r29:   1 r30: 197 r31:  19 
x  :   3 y  :  22 z  :   9 
Registers used: 24 out of 35 (68.6%)

ATmega164A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   0 
adiw  :   2 and   :   0 andi  :   3 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   6 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :  22 brmi  :   0 brne  :  10 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   7 
cbi   :  67 cbr   :   1 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   7 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   3 cpc   :  26 cpi   :  26 cpse  :   0 dec   :   3 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   3 inc   :   3 jmp   :  36 ld    :   9 ldd   :   0 ldi   :  86 
lds   :   7 lpm   :   7 lsl   :   0 lsr   :   0 mov   :   5 movw  :   4 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   3 out   :  26 pop   :   0 push  :   0 rcall :   3 ret   :   4 
reti  :   2 rjmp  :  19 rol   :   0 ror   :   0 sbc   :   0 sbci  :   2 
sbi   :  18 sbic  :   0 sbis  :   1 sbiw  :   5 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  18 std   :   0 sts   :  43 sub   :   0 subi  :   2 swap  :   0 
tst   :   1 wdr   :   3 
Instructions used: 40 out of 116 (34.5%)

ATmega164A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0004c2   1180     38   1218   16384   7.4%
[.dseg] 0x000100 0x000214      0     20     20    1279   1.6%
[.eseg] 0x000000 0x000001      0      1      1     512   0.2%

Assembly complete, 0 errors, 8 warnings
